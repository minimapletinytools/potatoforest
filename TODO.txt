a -┐
↓  |
b  |
↓  |
c  |
↓  ↓
d1 d2
↓  |
e ←┘

start from a
start from e

::TODO::
-phantom recipes (only for solver, does not show up in visualizer)
-Parsing ItemExp should fail entire parser if it finds items that don't exist
-fix tier generation to handle circular dependencies
-do proper item positioning
  -average of parent position ,then sorted to fit from left to right
-starting items box
-figure out how to
  -readfile (is it even possible?)
    - or upload file?
  -include image to render
  -maybe create text box?
-figure out how to make potato forest an external dep or submodule (separate repo)
-figure out how to make reflex-platform an external dep

::STYLING MVP::
-write better styling helpers
-define classes
  -item, path, selected, tooltip
-do greyed out item boxes
IGNORE-do select all option (initial state?)
-create proper style sheet

::PARSER TODO::
-mid priority
  -do variable name cleanup in parsers (maybe make new modules?)
  -do proper encapsulation for parser methods
-low priority
  -allow something like "INCLUDE helper.spec" sorta commands
    -the implementation should parse the files separately passing the state between them D:
  -figure out what default deriving on Item and Recipe didn't work as expected
  -figure out how to derive Default instance rather than defining your own

::DONE::
DONE-fix item highlighting to handle circular dependencies
DONE-fix mouse hover
  IGNORE-or maybe you should just do the JS rendered page thing... (though this has the same circular dependency problem)
FAIL-load up SC1 tech tree D:
DONE-get basic mouseover nonsense working
  -make sure the mouseover box does not cover so you can still click to highlight
  DONE-do mouseout nonsense :)
DONE-get boxes to draw to correct size
DONE-get lines to point to correct part of box
DONE-click should unselect
DONE-click should highlight all dependencies recursively
DONE-add helper methods to recurse up a tree and recurse down a tree
  -you can probably do applicative to handle Nothing case or something like that.
DONE-tags
DONE-icon
DONE-full image
DONE-phantom
DONE-figure out how to handle time properly...
DONE-fix show instances of recipes and starting items so that they don't show the items all over again
IGNORE-add parsing for infinity keyword
DONE-add STARTING parsing as part of item parsing and remove the other STARTING parsing
DONE-make sure auto generated names can be used as properties in html
DONE-fix `manyTill _ reservedWord` parsing, it's broke af
  -should recognize any all caps word at the beginning of a line as a keyword
  -easy way to fix is to require item descriptions to be in one line or to be in quotation marks
DONE-finish required tasks in frontend
DONE-add tests for untested stuff in Types.hs
DONE-slight cleanup in parser tests
DONE-try out basic reflex stuff
DONE-remove commond and backend, add potato forest
IGNORE-switch frontend to use hpack instead of cabal D:
IGNORE/FAIL-consider changing how time works (maybe make it an INPUT parameter instead of requires)
  -can you allow other things to be treated like time to make it less special?
